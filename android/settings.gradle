// android/settings.gradle 파일

pluginManagement {
  // --- 이 블록이 추가/수정되었습니다 ---
  repositories {
      google()
      mavenCentral()
      gradlePluginPortal()
  }
  resolutionStrategy {
      eachPlugin {
          // 요청된 플러그인이 코틀린 관련 플러그인일 경우,
          if (requested.id.id.startsWith("org.jetbrains.kotlin")) {
              // rootProject의 build.gradle에 정의된 kotlinVersion 변수("1.8.20")를 사용하도록 강제합니다.
              useVersion(rootProject.ext.kotlinVersion)
          }
      }
  }
  // --- 여기까지가 추가/수정된 블록입니다 ---


  // --- 이하는 기존 코드를 그대로 유지합니다 ---
  def reactNativeGradlePlugin = new File(
    providers.exec {
      workingDir(rootDir)
      commandLine("node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })")
    }.standardOutput.asText.get().trim()
  ).getParentFile().absolutePath
  includeBuild(reactNativeGradlePlugin)
  
  def expoPluginsPath = new File(
    providers.exec {
      workingDir(rootDir)
      commandLine("node", "--print", "require.resolve('expo-modules-autolinking/package.json', { paths: [require.resolve('expo/package.json')] })")
    }.standardOutput.asText.get().trim(),
    "../android/expo-gradle-plugin"
  ).absolutePath
  includeBuild(expoPluginsPath)
}

plugins {
  id("com.facebook.react.settings")
  id("expo-autolinking-settings")
}

extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
  if (System.getenv('EXPO_USE_COMMUNITY_AUTOLINKING') == '1') {
    ex.autolinkLibrariesFromCommand()
  } else {
    ex.autolinkLibrariesFromCommand(expoAutolinking.rnConfigCommand)
  }
}
expoAutolinking.useExpoModules()

rootProject.name = 'NoPlan'

expoAutolinking.useExpoVersionCatalog()

include ':app'
includeBuild(expoAutolinking.reactNativeGradlePlugin)